//
//  FPDashboardWorker.swift
//  Cryptorio
//
//  Created by Anak Mirasing on 7/11/2560 BE.
//  Copyright (c) 2560 iGROOMGRiM. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift

class FPDashboardWorker {
  let disposeBag = DisposeBag()
  
  func fetchAPIData(walletID: String, completion: @escaping (FPResult<FPData>) -> Void) {
    let client = APIClient()
    let endpoint = APIEndpoint<FPData>(endpoint: FPEndpoint.dashboard, walletID: walletID)
    let callDashboardData = ServiceCall.init(endpoint: endpoint, client: client)
    
    callDashboardData.subscribe(onNext: { (result) in
      guard let value = result.value() as? Data else {
        let error = FPError.api("Reponse data is empty. We can't fetch data from Flypool API")
        let errorResult = FPResult<FPData>.Failure(error: error)
        DispatchQueue.main.async {
          completion(errorResult)
        }
        
        return
      }
      
      let dashboard = endpoint.deserialize(value).0
      guard let fpData = dashboard else {
        let error = FPError.api("Reponse data can't deserialize")
        let errorResult = FPResult<FPData>.Failure(error: error)
        DispatchQueue.main.async {
          completion(errorResult)
        }
        
        return
      }
      
      let result = FPResult.Success(result: fpData)
      DispatchQueue.main.async {
        completion(result)
      }

    }, onError: { (err) in
      let fpError = FPError.other(err.localizedDescription)
      let errorResult = FPResult<FPData>.Failure(error: fpError)
      DispatchQueue.main.async {
        completion(errorResult)
      }
    }, onCompleted: nil, onDisposed: nil)
      .addDisposableTo(disposeBag)
  }
  
  func fetchWalletID() -> String? {
    return WalletIDStore.getWalletID(from: .flypool)
  }
  
  func fetchWorkers(walletID: String, completion: @escaping ([FPHTMLWorker]?) -> Void) {    
    let client = APIClient()
    let endpoint = APIEndpoint<FPHTMLWorker>(endpoint: FPEndpoint.worker, walletID: walletID)
    let callWorkerData = ServiceCall.init(endpoint: endpoint, client: client)
    
    callWorkerData.subscribe(onNext: { (result) in
      guard let value = result.value() as? Data else {
        DispatchQueue.main.async {
          completion(nil)
        }
        
        return
      }
      
      guard let workers = endpoint.deserialize(value).1 else {
        DispatchQueue.main.async {
          completion(nil)
        }
        
        return
      }

      DispatchQueue.main.async {
        completion(workers)
      }
      
    }, onError: { (err) in
      DispatchQueue.main.async {
        completion(nil)
      }
    }, onCompleted: nil, onDisposed: nil)
    .addDisposableTo(disposeBag)
  }
}
